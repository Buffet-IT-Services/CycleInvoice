services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py wait_for_db &&
            python manage.py migrate &&
            python manage.py collectstatic --noinput &&
            gunicorn config.wsgi:application --bind 0.0.0.0:8000"
    volumes:
      - .:/code
      - static_volume:/code/staticfiles
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-False}
      - DJANGO_DB_HOST=db
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - JWT_AUTH_COOKIE=${JWT_AUTH_COOKIE:-jwt}
      - JWT_AUTH_COOKIE_SAMESITE=${JWT_AUTH_COOKIE_SAMESITE:-Lax}
      - JWT_AUTH_HEADER_PREFIX=${JWT_AUTH_HEADER_PREFIX:-Bearer}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cycleinvoice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:16
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=cycleinvoice
      - POSTGRES_PASSWORD=cycleinvoice
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/db-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - cycleinvoice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cycleinvoice -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    command: redis-server --requirepass foobared
    volumes:
      - redis_data:/data
    networks:
      - cycleinvoice-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "foobared", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py wait_for_db &&
            celery -A cycle_invoice.celery worker --loglevel=info"
    volumes:
      - .:/code
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-False}
      - DJANGO_DB_HOST=db
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cycleinvoice-network

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py wait_for_db &&
            celery -A cycle_invoice.celery beat --loglevel=info"
    volumes:
      - .:/code
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-False}
      - DJANGO_DB_HOST=db
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cycleinvoice-network

networks:
  cycleinvoice-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  static_volume: